#include <iostream>

using namespace std;


// ** 숙제 
// ** OOP(객체지향)의 특징 5가지 구체적으로 알아오기.



// **포인터를 교육하기 위한 클레스
class Object
{
private:
	string Key;
public:
	void Initialize() { Key = "Player"; }
	void Output() { cout << Key << endl; }
public:
	Object() { }
	~Object() { }
};


int main(void)
{
	/*
	int Num = 10;
	int* pNumber = &Num;

	cout << *pNumber << endl;
	*/



	/*
	int iArray[128] = { 0 };

	for (int i = 0; i < 128; ++i)
		iArray[i] = i + 1;

	int* iter = iArray;

	for (int i = 0; i < 128; ++i)
	{
		cout << *(iter + i) << endl;
	}
	*/


	Object* pObj = new Object;

	pObj->Initialize();
	pObj->Output();



	return 0;
}


	// **2의 보수


	// **00000001 = 1
	// **00000010 = 2
	// **00000011 = 3
	// **00000100 = 4
	// **00000101 = 5
	// **00000110 = 6
	// **00000111 = 7
	// **00001000 = 8
	// **00001001 = 9
	// **00001010 = 10
	// **00001011 = 11
	// **00001100 = 12
	// **00001101 = 13
	// **00001110 = 14
	// **00001111 = 15
	// **00010000 = 16
	// **00010001 = 17
	// **00010010 = 18




	//** [더하기]
	//   00001010 = 10
	// + 00001000 = 8
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   00010010 = 18



	//** [빼기 1]
	//   00001010 = 10
	// - 00001000 =  8
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   00000000 =  2;


	// * 10 - 8 == 10 + (-8)
	//   1111
	//   00001000
	// + 11111111
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   11110111 + 1
	//   11111000 = -8


	//   1111
	//   00001010 = 10
	// + 11111000 = -8
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   00000010 = 02




	//** [빼기 2]
	//   00000100 = 4
	// - 00000010 = 2
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   00000000 = 0

	// ** 4 - 2 == 4 + (-2)


	//   00000010 = 2
	// + 11111111 <= 1의 보수
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   11111101 
	// + 00000001 <= 1의 보수 
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   11111110 = (-2)

	//   11111
	//   00000100 =   4
	// + 11111110 = (-2)
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   00000010 = 2





	//** [빼기 3]
	//   00000001 = 1
	// - 00000011 = 3
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   00000000 = 0

	// ** 1 - 3 == 1 + (-3)


	//   00000011
	// + 11111111
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   11111100 
	// + 00000001 
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   11111101 = (-3)



	//   00000001 = 1
	// + 11111101 = (-3) 
	//ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	//   11111110 = (-2)